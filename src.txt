;; グローバル変数の定義
;;   主に、プロットへの表示に利用される。
globals [
  bank-loans                            ;; turtles の loans の合計
  bank-reserves                         ;; 銀行が保有している資金のうち、貸出に充てられない金額
  bank-deposits                         ;; turtles の savings の合計
  bank-to-loan                          ;; 銀行が保有している資金のうち、貸出に充てることができる額（余裕資金）
  x-max                                 ;; プロット("Money & Loans", "Savings & Wallets", "Income Dist")の表示のX軸の最大値 (初期値 300, プロットの式:set-plot-x-range 0 x-max)
  y-max                                 ;; プロット("Money & Loans", "Savings & Wallets")の表示のY軸の最大値 (初期値: 2 * money-total, プロットの式: set-plot-y-range -50 y-max)
  rich                                  ;; プロット("Income Dist")のrichの数 (プロットの式: plot rich)
  poor                                  ;; プロット("Income Dist")のpoorの数 (プロットの式: plot poor)
  middle-class                          ;; プロット("Income Dist")のmiddle-classの数(プロットの式: plot middle-class)
  rich-threshold                        ;; richの閾値。initialize-variables関数で10に設定される。また、setup-turtlesでwalletの初期値を決める)
]

;; turtleの変数
;;   turtleが持つ特性を表現するために利用される。以下、turtleの"属性"と呼称する。
turtles-own [
  savings                               ;; turtle の saving 属性
  loans                                 ;; turtle の loans 属性
  wallet                                ;; turtle の wallet 属性
  temp-loan                             ;; balance-books関数等で使用する属性。temp-loan = amount available to borrow
  wealth                                ;; savings - loansの値を持つ属性。プロット("Wealth Distribution Histogram")でヒストグラムを作るのに利用される。
  customer                              ;; do-business関数で利用する属性。turtle自身の現在地に他のturtleがいるかどうかを表わす(one-of other turtles-here)。
]

;; Setup関数
;;   Setupボタンを押したときに呼ばれる初期化のための関数。
to setup
  clear-all                             ;; すべてを削除する
  initialize-variables                  ;; プロットに関するグローバル変数( rich, middle-class , poor, rich-threshold)の初期化
  ask patches [set pcolor black]        ;; パッチ(背景)を黒にする
  set-default-shape turtles "person"    ;; turtleの形を"人"にする
  create-turtles people [setup-turtles] ;; スライダーのpeople変数の数分、setup-turtles関数で初期化したturtleを作成する。
  setup-bank                            ;; bankに関する変数(bank-loans, bank-reserves, bank-deposits, bank-to-loan)の初期化
  set x-max 300                         ;; プロットのX軸のx-maxグローバル変数の初期値を設定する
  set y-max 2 * money-total             ;; プロットのY軸のy-maxグローバル変数の初期値を設定する ( money-total の 2倍に設定する )
  reset-ticks                           ;; tick をリセットする
end

;; turtleに関する変数(属性)の初期化の関数
to setup-turtles  ;; turtle procedure   ;; あるturtleの処理
  set color blue                        ;; turtleを青にする
  setxy random-xcor random-ycor         ;; turtleをWorld上にランダムに配置する
  set wallet (random rich-threshold) + 1 ;;limit money to threshold ;; walletを1 ～ 10(rich-threshold)までの間で初期化する
  set savings 0                         ;; savings 属性の初期化
  set loans 0                           ;; loans 属性の初期化
  set wealth 0                          ;; wealth 属性の初期化
  set customer -1                       ;; customer 属性の初期化 (-1: 他のturtleが同じ場所にはいない)
end

;; bankに関する変数の初期化の関数
to setup-bank ;;initialize bank
  set bank-loans 0                      ;; bank-loansグローバル変数の初期化
  set bank-reserves 0                   ;; bank-reservesグローバル変数の初期化
  set bank-deposits 0                   ;; bank-depositsグローバル変数の初期化
  set bank-to-loan 0                    ;; bank-to-loanグローバル変数の初期化
end

;; プロットに関する変数の初期化の関数
to initialize-variables
  set rich 0                            ;; richグローバル変数の初期化
  set middle-class 0                    ;; middle-classグローバル変数の初期化
  set poor 0                            ;; poorグローバル変数の初期化
  set rich-threshold 10                 ;; rich-thresholdグローバル変数の初期化
end

;; turtleの色をsavings, loansの値に応じて変更する関数
to get-shape  ;;turtle procedure        ;; あるturtleの処理
  if (savings > 10)  [set color green]  ;; もし、savingsが10以上であるならば、turtleの色を緑にする
  if (loans > 10) [set color red]       ;; もし、loansが10以上であるならば、turtleの色を赤にする
  set wealth (savings - loans)          ;; wealth変数
end

;; go ボタンを押したときに呼ばれるNetlogのプログラム進行のための関数
;;   tick関数によりシミュレーションが1つずつ進行する。シミュレーションの進んだ数をticksで取得きる。(以下ticks数と呼ぶ)
;;   ticks数を3で割った余りをチェックすることで、以下の３つのターンに分けてシミュレーションは進行する。
;;     余り 0 : do-bussiness関数を呼んで、turtleのビジネスを行う
;;     余り 1 : balance-book関数とget-shape関数を呼んで、turtleのお金の計算と色を変える
;;     余り 2(上記以外) : bank-balance-sheet関数を呼んで、savingsやloanの総額等を計算する
;;
to go
  ;;tabulates each distinct class population
  set rich (count turtles with [savings > rich-threshold]) ;; turtleのsavingsがrich-thresholdを超えるturtleの数をカウントしrichグローバル変数に入れる
  set poor (count turtles with [loans > 10])               ;; turtleのloansが10を超えるturtleの数をカウントしpoorグローバル変数に入れる
  set middle-class (count turtles - (rich + poor))         ;; turtleの総数 - (richとpoorの合計)をmiddle-classグローバル変数に入れる
  ask turtles [                                            ;; あるturtleを順番に取り出し、各変数に変更を加える。シミュレーション進行を司る処理。
    ifelse ticks mod 3 = 0                                 ;; もし、ticks数を3で割り、余りが0かどうかをチェックし...(1)
      [do-business] ;;first cycle, "do business"           ;; (1)が真である場合、do-business関数を実行する
      [ifelse ticks mod 3 = 1  ;;second cycle, "balance books" and "get shape" ;; (1)が偽である場合、ticks数を3で割り、余りが1であるかチェックし...(2)
         [balance-books                                    ;; (2)が真である場合、balance-books関数を実行する
          get-shape]                                       ;; (2)が真である場合、get-shape関数を実行する
         [bank-balance-sheet] ;;third cycle, "bank balance sheet" ;; 上記以外(ticks数を3で割り余りが2である場合、bank-balance-sheet関数を実行する
      ]                                                    ;; (2)の範囲の終了
  ]                                                        ;; (1)の範囲の終了
  tick                                                     ;; tickでシミュレーションを1つ進める
end

;; turtleのビジネスの関数
to do-business  ;;turtle procedure      ;; あるturtleの処理
  rt random-float 360                   ;; turtleの向きを変える(0～360の範囲で浮動所数点をランダムに決める)
  fd 1                                  ;; turtleが1つ前に進む

  if ((savings > 0) or (wallet > 0) or (bank-to-loan > 0))  ;; もし、savings、wallet、bank-to-loanのいずれかが0より大きいかチェックし...(3)
    [set customer one-of other turtles-here  ;; (3)が真である場合、turtleの現在地に他のturtleの１つをcustomerに入れる(いない場合はnobodyになる)
     if customer != nobody              ;; もし、customerがnobodyと等しくないかチェックし...(4)
     [if (random 2) = 0                 ;; 50% chance of trading with customer ;; もし、(4)が真である場合、ランダムに0～2よりも小さい値({0,1}) を生成し、0であるかチェックし...(5)(すなわち50%の確率で)
           [ifelse (random 2) = 0       ;; 50% chance of trading $5 or $2      ;; (5)が真である場合、ランダムに0～2よりも小さい値({0,1})を生成し、0であるかチェックし...(6)(すなわち50%の確率で)
              [ask customer [set wallet wallet + 5] ;;give 5 to customer            ;; (6)が真である場合、customerのwalletに5を足す
               set wallet (wallet - 5) ];;take 5 from wallet                       ;; 上記の条件の続きで、自身のwalletから5を引く
              [ask customer [set wallet wallet + 2] ;;give 2 to customer            ;; (6)が偽である場合、customerのwalletに2を足す
               set wallet (wallet - 2) ];;take 2 from wallet                       ;; 上記の条件の続きで、自身のwalletから2を引く
           ]                            ;; (5)の範囲の終了
        ]                               ;; (4)の範囲の終了
     ]                                  ;; (3)の範囲の終了
end


;; Turtleのwallet, savings, loansのやり取りをする関数
;;
;; First checks balance of the turtle's wallet, and then either puts
;; a positive balance in savings, or tries to get a loan to cover
;; a negative balance.  If it cannot get a loan (if bank-to-loan < 0)
;; then it maintains the negative balance until the next round.  It
;; then checks if it has loans and money in savings, and if so, will
;; proceed to pay as much of that loan off as possible from the money
;; in savings.
to balance-books
  ifelse (wallet < 0)                   ;; もし、walletが0よりも大きいかチェックし...(7)
    [ifelse (savings >= (- wallet))     ;; (7)が真であるならば(walletが負である)、もし、savingsが(負の値を正の値に変換した)wallet以上であるかチェックし...(8)
       [withdraw-from-savings (- wallet)]   ;; (8)が真であるらなば、withdraw-from-savings関数(引数の金額分、walletに足し、savingから引く)を実行する。このとき、(負の値を正の値に変換した)walletを引数に渡す。
       [if (savings > 0)                ;; もし、savingsが0より大きいかチェックし...(9)
          [withdraw-from-savings savings]   ;; (9)が真であるならば、withdraw-from-savings関数(引数の金額分、walletに足し、savingから引く)を実行する。このとき、(負の値を正の値に変換した)walletを引数に渡す。

        set temp-loan bank-to-loan          ;;temp-loan = amount available to borrow ;; temp-loanにbank-to-loanを入れる。
        ifelse (temp-loan >= (- wallet))    ;; temp-loanが（負の値を正の値に変換した)wallet以上であるかチェックし、...(10)
          [take-out-loan (- wallet)]        ;; (10)が真であるならば、take-out-loan関数(引数の金額分、loansとwalletに足し、bank-to-loanから引く)を実行する。このとき、(負の値を正の値に変換した)walletを引数に渡す。
          [take-out-loan temp-loan]         ;; (10)が負であるならば、take-out-loan関数(引数の金額分、loansとwalletに足し、bank-to-loanから引く)を実行する。このとき、(負の値を正の値に変換した)walletを引数に渡す
       ]
     ]
    [deposit-to-savings wallet]

  if (loans > 0 and savings > 0)            ;; when there is money in savings to payoff loan
    [ifelse (savings >= loans)
       [withdraw-from-savings loans
        repay-a-loan loans]
       [withdraw-from-savings savings
        repay-a-loan wallet]
    ]
end


;; Sets aside required amount from liabilities into
;; reserves, regardless of outstanding loans.  This may
;; result in a negative bank-to-loan amount, which
;; means that the bank will be unable to loan money
;; until it can set enough aside to account for reserves.

to bank-balance-sheet ;;update monitors
  set bank-deposits sum [savings] of turtles
  set bank-loans sum [loans] of turtles
  set bank-reserves (reserves / 100) * bank-deposits
  set bank-to-loan bank-deposits - (bank-reserves + bank-loans)
end


to deposit-to-savings [amount] ;;fundamental procedures
  set wallet wallet - amount
  set savings savings + amount
end


to withdraw-from-savings [amount] ;;fundamental procedures
  set wallet (wallet + amount)
  set savings (savings - amount)
end


to repay-a-loan [amount] ;;fundamental procedures
  set loans (loans - amount)
  set wallet (wallet - amount)
  set bank-to-loan (bank-to-loan + amount)
end


to take-out-loan [amount] ;;fundamental procedures
  set loans (loans + amount)
  set wallet (wallet + amount)
  set bank-to-loan (bank-to-loan - amount)
end


to-report savings-total
  report sum [savings] of turtles
end


to-report loans-total
  report sum [loans] of turtles
end


to-report wallets-total
  report sum [wallet] of turtles
end


to-report money-total
  report sum [wallet + savings] of turtles
end


; Copyright 1998 Uri Wilensky.
; See Info tab for full copyright and license.
